{\rtf1\ansi\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Courier New;}}
{\*\generator Riched20 10.0.18362}\viewkind4\uc1 
\pard\f0\fs22\lang1033 Carter Welke CIST 004B Spring 2020\par
\par
FIRST RUN\par
\par
Enter the size of Array you wish to sort (not more than 100,000,000): 32869\par
Do you wish a single run (Y/N): Y\par
\par
Now executing a sample Shaker Sort of 32869 items.\par
A sample Shaker Sort took 2.596677 Seconds.\par
Now Executing a sample Shaker Sort of 32869 pre-sorted items.\par
A sample Shaker Sort took 0.000213 Seconds.\par
\par
Now executing the Bubble Sort of 32869 items.\par
The Bubble Sort took 50.336703 Seconds.\par
Now Executing the Bubble Sort of 32869 pre-sorted items.\par
The Bubble Sort took 1.657715 Seconds.\par
\par
Now executing your Optimized Bubble Sort of 32869 items.\par
Your Optimized Bubble Sort took 39.073777 Seconds.\par
Now Executing your Optimized Bubble Sort of 32869 pre-sorted items.\par
Your Optimized Bubble Sort took 0.000131 Seconds.\par
\par
Now executing your Selection Sort of 32869 items.\par
Your Selection Sort took 1.581879 Seconds.\par
Now Executing your Selection Sort of 32869 pre-sorted items.\par
Your Selection Sort took 3.705564 Seconds.\par
\par
Now executing your Insertion Sort of 32869 items.\par
Your Insertion Sort took 0.860361 Seconds.\par
Now Executing your Insertion Sort of 32869 pre-sorted items.\par
Your Insertion Sort took 0.000167 Seconds.\par
\par
Now executing your Heap Sort of 32869 items.\par
Your Heap Sort took 0.153497 Seconds.\par
Now Executing your Heap Sort of 32869 pre-sorted items.\par
Your Heap Sort took 0.120702 Seconds.\par
\par
Now executing your Heap Sort no recursion of 32869 items.\par
Your Heap Sort no recursion took 0.133550 Seconds.\par
Now Executing your Heap Sort no recursion of 32869 pre-sorted items.\par
Your Heap Sort no recursion took 0.224059 Seconds.\par
\par
Now executing your Merge Sort of 32869 items.\par
Your Merge Sort took 0.027021 Seconds.\par
Now Executing your Merge Sort of 32869 pre-sorted items.\par
Your Merge Sort took 0.022007 Seconds.\par
\par
\par
C:\\Users\\Carter\\source\\repos\\C++DataStructures\\Wk14SortingPrograms\\Debug\\Wk14SortingPrograms.exe (process 13692) exited with code 0.\par
To automatically close the console when debugging stops, enable Tools->Options->Debugging->Automatically close the console when debugging stops.\par
Press any key to close this window . . .\par
\par
SECOND RUN: 32768 items (2^15)\par
\par
Enter the size of Array you wish to sort (not more than 100,000,000): 32768\par
Do you wish a single run (Y/N): Y\par
\par
Now executing a sample Shaker Sort of 32768 items.\par
A sample Shaker Sort took 2.505148 Seconds.\par
Now Executing a sample Shaker Sort of 32768 pre-sorted items.\par
A sample Shaker Sort took 0.000220 Seconds.\par
\par
Now executing the Bubble Sort of 32768 items.\par
The Bubble Sort took 38.911364 Seconds.\par
Now Executing the Bubble Sort of 32768 pre-sorted items.\par
The Bubble Sort took 1.623894 Seconds.\par
\par
Now executing your Optimized Bubble Sort of 32768 items.\par
Your Optimized Bubble Sort took 39.066926 Seconds.\par
Now Executing your Optimized Bubble Sort of 32768 pre-sorted items.\par
Your Optimized Bubble Sort took 0.000108 Seconds.\par
\par
Now executing your Selection Sort of 32768 items.\par
Your Selection Sort took 1.585983 Seconds.\par
Now Executing your Selection Sort of 32768 pre-sorted items.\par
Your Selection Sort took 3.623045 Seconds.\par
\par
Now executing your Insertion Sort of 32768 items.\par
Your Insertion Sort took 0.809601 Seconds.\par
Now Executing your Insertion Sort of 32768 pre-sorted items.\par
Your Insertion Sort took 0.000160 Seconds.\par
\par
Now executing your Heap Sort of 32768 items.\par
Your Heap Sort took 0.115067 Seconds.\par
Now Executing your Heap Sort of 32768 pre-sorted items.\par
Your Heap Sort took 0.115780 Seconds.\par
\par
Now executing your Heap Sort no recursion of 32768 items.\par
Your Heap Sort no recursion took 0.149697 Seconds.\par
Now Executing your Heap Sort no recursion of 32768 pre-sorted items.\par
Your Heap Sort no recursion took 0.222355 Seconds.\par
\par
Now executing your Merge Sort of 32768 items.\par
Your Merge Sort took 0.026960 Seconds.\par
Now Executing your Merge Sort of 32768 pre-sorted items.\par
Your Merge Sort took 0.024237 Seconds.\par
\par
\par
C:\\Users\\Carter\\source\\repos\\C++DataStructures\\Wk14SortingPrograms\\Debug\\Wk14SortingPrograms.exe (process 1320) exited with code 0.\par
To automatically close the console when debugging stops, enable Tools->Options->Debugging->Automatically close the console when debugging stops.\par
Press any key to close this window . . .\par
\par
FINAL RUN\par
\par
Enter the size of Array you wish to sort (not more than 100,000,000): 25000\par
Do you wish a single run (Y/N): N\par
\par
Testing every Sort Routine with array sizes of from 0 to 25000 numbers.\par
Starting at:                            Mon May 11 23:29:28 2020\par
    0 . . . . . . . . . .       Mon May 11 23:29:28 2020\par
  100 . . . . . . . . . .       Mon May 11 23:29:28 2020\par
  200 . . . . . . . . . .       Mon May 11 23:29:29 2020\par
  300 . . . . . . . . . .       Mon May 11 23:29:30 2020\par
  400 . . . . . . . . . .       Mon May 11 23:29:32 2020\par
  500 . . . . . . . . . .       Mon May 11 23:29:35 2020\par
  600 . . . . . . . . . .       Mon May 11 23:29:39 2020\par
  700 . . . . . . . . . .       Mon May 11 23:29:43 2020\par
  800 . . . . . . . . . .       Mon May 11 23:29:49 2020\par
  900 . . . . . . . . . .       Mon May 11 23:29:57 2020\par
 1000 . . . . . . . . . .       Mon May 11 23:30:06 2020\par
 1100 . . . . . . . . . .       Mon May 11 23:30:16 2020\par
 1200 . . . . . . . . . .       Mon May 11 23:30:29 2020\par
 1300 . . . . . . . . . .       Mon May 11 23:30:44 2020\par
 1400 . . . . . . . . . .       Mon May 11 23:31:01 2020\par
 1500 . . . . . . . . . .       Mon May 11 23:31:21 2020\par
 1600 . . . . . . . . . .       Mon May 11 23:31:43 2020\par
 1700 . . . . . . . . . .       Mon May 11 23:32:09 2020\par
 1800 . . . . . . . . . .       Mon May 11 23:32:37 2020\par
 1900 . . . . . . . . . .       Mon May 11 23:33:07 2020\par
 2000 . . . . . . . . . .       Mon May 11 23:33:41 2020\par
 2100 . . . . . . . . . .       Mon May 11 23:34:17 2020\par
 2200 . . . . . . . . . .       Mon May 11 23:34:58 2020\par
 2300 . . . . . . . . . .       Mon May 11 23:35:42 2020\par
 2400 . . . . . . . . . .       Mon May 11 23:36:30 2020\par
 2500 . . . . . . . . . .       Mon May 11 23:37:21 2020\par
 2600 . . . . . . . . . .       Mon May 11 23:38:17 2020\par
 2700 . . . . . . . . . .       Mon May 11 23:39:17 2020\par
 2800 . . . . . . . . . .       Mon May 11 23:40:21 2020\par
 2900 . . . . . . . . . .       Mon May 11 23:41:30 2020\par
 3000 . . . . . . . . . .       Mon May 11 23:42:51 2020\par
 3100 . . . . . . . . . .       Mon May 11 23:44:09 2020\par
 3200 . . . . . . . . . .       Mon May 11 23:45:33 2020\par
 3300 . . . . . . . . . .       Mon May 11 23:47:02 2020\par
 3400 . . . . . . . . . .       Mon May 11 23:48:36 2020\par
 3500 . . . . . . . . . .       Mon May 11 23:50:17 2020\par
 3600 . . . . . . . . . .       Mon May 11 23:52:03 2020\par
 3700 . . . . . . . . . .       Mon May 11 23:53:55 2020\par
 3800 . . . . . . . . . .       Mon May 11 23:55:53 2020\par
 3900 . . . . . . . . . .       Mon May 11 23:58:01 2020\par
 4000 . . . . . . . . . .       Tue May 12 00:00:12 2020\par
 4100 . . . . . . . . . .       Tue May 12 00:02:28 2020\par
 4200 . . . . . . . . . .       Tue May 12 00:04:56 2020\par
 4300 . . . . . . . . . .       Tue May 12 00:07:26 2020\par
 4400 . . . . . . . . . .       Tue May 12 00:10:04 2020\par
 4500 . . . . . . . . . .       Tue May 12 00:43:17 2020\par
 4600 . . . . . . . . . .       Tue May 12 09:06:39 2020\par
 4700 . . . . . . . . . .       Tue May 12 09:10:03 2020\par
 4800 . . . . . . . . . .       Tue May 12 09:13:20 2020\par
 4900 . . . . . . . . . .       Tue May 12 09:16:31 2020\par
 5000 . . . . . . . . .\par
}
 